#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LandfillServices.UI.Web.SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Landfill")]
	public partial class DataClassesLandfillDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBroker(Broker instance);
    partial void UpdateBroker(Broker instance);
    partial void DeleteBroker(Broker instance);
    partial void InsertPassageLandfill(PassageLandfill instance);
    partial void UpdatePassageLandfill(PassageLandfill instance);
    partial void DeletePassageLandfill(PassageLandfill instance);
    partial void InsertBrokerAccounting(BrokerAccounting instance);
    partial void UpdateBrokerAccounting(BrokerAccounting instance);
    partial void DeleteBrokerAccounting(BrokerAccounting instance);
    partial void InsertBrokerPassageProduct(BrokerPassageProduct instance);
    partial void UpdateBrokerPassageProduct(BrokerPassageProduct instance);
    partial void DeleteBrokerPassageProduct(BrokerPassageProduct instance);
    partial void InsertBrokerPaymentCommission(BrokerPaymentCommission instance);
    partial void UpdateBrokerPaymentCommission(BrokerPaymentCommission instance);
    partial void DeleteBrokerPaymentCommission(BrokerPaymentCommission instance);
    partial void InsertContractsBroker(ContractsBroker instance);
    partial void UpdateContractsBroker(ContractsBroker instance);
    partial void DeleteContractsBroker(ContractsBroker instance);
    partial void InsertContractsLogistic(ContractsLogistic instance);
    partial void UpdateContractsLogistic(ContractsLogistic instance);
    partial void DeleteContractsLogistic(ContractsLogistic instance);
    partial void InsertContratsBrokerRemuneratedSetting(ContratsBrokerRemuneratedSetting instance);
    partial void UpdateContratsBrokerRemuneratedSetting(ContratsBrokerRemuneratedSetting instance);
    partial void DeleteContratsBrokerRemuneratedSetting(ContratsBrokerRemuneratedSetting instance);
    partial void InsertContratsLogisticsRemuneratedSetting(ContratsLogisticsRemuneratedSetting instance);
    partial void UpdateContratsLogisticsRemuneratedSetting(ContratsLogisticsRemuneratedSetting instance);
    partial void DeleteContratsLogisticsRemuneratedSetting(ContratsLogisticsRemuneratedSetting instance);
    partial void InsertEnumDisplay(EnumDisplay instance);
    partial void UpdateEnumDisplay(EnumDisplay instance);
    partial void DeleteEnumDisplay(EnumDisplay instance);
    partial void InsertLandfillUser(LandfillUser instance);
    partial void UpdateLandfillUser(LandfillUser instance);
    partial void DeleteLandfillUser(LandfillUser instance);
    partial void InsertLogisticAccounting(LogisticAccounting instance);
    partial void UpdateLogisticAccounting(LogisticAccounting instance);
    partial void DeleteLogisticAccounting(LogisticAccounting instance);
    partial void InsertLogisticPaymentCommission(LogisticPaymentCommission instance);
    partial void UpdateLogisticPaymentCommission(LogisticPaymentCommission instance);
    partial void DeleteLogisticPaymentCommission(LogisticPaymentCommission instance);
    partial void InsertLogistic(Logistic instance);
    partial void UpdateLogistic(Logistic instance);
    partial void DeleteLogistic(Logistic instance);
    partial void InsertLogisticTurnCollect(LogisticTurnCollect instance);
    partial void UpdateLogisticTurnCollect(LogisticTurnCollect instance);
    partial void DeleteLogisticTurnCollect(LogisticTurnCollect instance);
    #endregion
		
		public DataClassesLandfillDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesLandfillDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesLandfillDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesLandfillDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Broker> Brokers
		{
			get
			{
				return this.GetTable<Broker>();
			}
		}
		
		public System.Data.Linq.Table<PassageLandfill> PassageLandfills
		{
			get
			{
				return this.GetTable<PassageLandfill>();
			}
		}
		
		public System.Data.Linq.Table<BrokerAccounting> BrokerAccountings
		{
			get
			{
				return this.GetTable<BrokerAccounting>();
			}
		}
		
		public System.Data.Linq.Table<BrokerPassageProduct> BrokerPassageProducts
		{
			get
			{
				return this.GetTable<BrokerPassageProduct>();
			}
		}
		
		public System.Data.Linq.Table<BrokerPaymentCommission> BrokerPaymentCommissions
		{
			get
			{
				return this.GetTable<BrokerPaymentCommission>();
			}
		}
		
		public System.Data.Linq.Table<ContractsBroker> ContractsBrokers
		{
			get
			{
				return this.GetTable<ContractsBroker>();
			}
		}
		
		public System.Data.Linq.Table<ContractsLogistic> ContractsLogistics
		{
			get
			{
				return this.GetTable<ContractsLogistic>();
			}
		}
		
		public System.Data.Linq.Table<ContratsBrokerRemuneratedSetting> ContratsBrokerRemuneratedSettings
		{
			get
			{
				return this.GetTable<ContratsBrokerRemuneratedSetting>();
			}
		}
		
		public System.Data.Linq.Table<ContratsLogisticsRemuneratedSetting> ContratsLogisticsRemuneratedSettings
		{
			get
			{
				return this.GetTable<ContratsLogisticsRemuneratedSetting>();
			}
		}
		
		public System.Data.Linq.Table<EnumDisplay> EnumDisplays
		{
			get
			{
				return this.GetTable<EnumDisplay>();
			}
		}
		
		public System.Data.Linq.Table<LandfillUser> LandfillUsers
		{
			get
			{
				return this.GetTable<LandfillUser>();
			}
		}
		
		public System.Data.Linq.Table<LogisticAccounting> LogisticAccountings
		{
			get
			{
				return this.GetTable<LogisticAccounting>();
			}
		}
		
		public System.Data.Linq.Table<LogisticPaymentCommission> LogisticPaymentCommissions
		{
			get
			{
				return this.GetTable<LogisticPaymentCommission>();
			}
		}
		
		public System.Data.Linq.Table<Logistic> Logistics
		{
			get
			{
				return this.GetTable<Logistic>();
			}
		}
		
		public System.Data.Linq.Table<LogisticTurnCollect> LogisticTurnCollects
		{
			get
			{
				return this.GetTable<LogisticTurnCollect>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Broker")]
	public partial class Broker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private string _CompanyName;
		
		private string _InternalCode;
		
		private string _CompanyRegistrationNumber;
		
		private EntitySet<ContractsBroker> _ContractsBrokers;
		
		private EntityRef<LandfillUser> _LandfillUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnInternalCodeChanging(string value);
    partial void OnInternalCodeChanged();
    partial void OnCompanyRegistrationNumberChanging(string value);
    partial void OnCompanyRegistrationNumberChanged();
    #endregion
		
		public Broker()
		{
			this._ContractsBrokers = new EntitySet<ContractsBroker>(new Action<ContractsBroker>(this.attach_ContractsBrokers), new Action<ContractsBroker>(this.detach_ContractsBrokers));
			this._LandfillUser = default(EntityRef<LandfillUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._LandfillUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalCode", DbType="NVarChar(200)")]
		public string InternalCode
		{
			get
			{
				return this._InternalCode;
			}
			set
			{
				if ((this._InternalCode != value))
				{
					this.OnInternalCodeChanging(value);
					this.SendPropertyChanging();
					this._InternalCode = value;
					this.SendPropertyChanged("InternalCode");
					this.OnInternalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyRegistrationNumber", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string CompanyRegistrationNumber
		{
			get
			{
				return this._CompanyRegistrationNumber;
			}
			set
			{
				if ((this._CompanyRegistrationNumber != value))
				{
					this.OnCompanyRegistrationNumberChanging(value);
					this.SendPropertyChanging();
					this._CompanyRegistrationNumber = value;
					this.SendPropertyChanged("CompanyRegistrationNumber");
					this.OnCompanyRegistrationNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Broker_ContractsBroker", Storage="_ContractsBrokers", ThisKey="ID", OtherKey="BrokerID")]
		public EntitySet<ContractsBroker> ContractsBrokers
		{
			get
			{
				return this._ContractsBrokers;
			}
			set
			{
				this._ContractsBrokers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LandfillUser_Broker", Storage="_LandfillUser", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public LandfillUser LandfillUser
		{
			get
			{
				return this._LandfillUser.Entity;
			}
			set
			{
				LandfillUser previousValue = this._LandfillUser.Entity;
				if (((previousValue != value) 
							|| (this._LandfillUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LandfillUser.Entity = null;
						previousValue.Broker = null;
					}
					this._LandfillUser.Entity = value;
					if ((value != null))
					{
						value.Broker = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("LandfillUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractsBrokers(ContractsBroker entity)
		{
			this.SendPropertyChanging();
			entity.Broker = this;
		}
		
		private void detach_ContractsBrokers(ContractsBroker entity)
		{
			this.SendPropertyChanging();
			entity.Broker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PassageLandfill")]
	public partial class PassageLandfill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private int _UserID;
		
		private System.DateTime _DateOfPassage;
		
		private int _Pay;
		
		private EntityRef<LandfillUser> _LandfillUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDateOfPassageChanging(System.DateTime value);
    partial void OnDateOfPassageChanged();
    partial void OnPayChanging(int value);
    partial void OnPayChanged();
    #endregion
		
		public PassageLandfill()
		{
			this._LandfillUser = default(EntityRef<LandfillUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._LandfillUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfPassage", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfPassage
		{
			get
			{
				return this._DateOfPassage;
			}
			set
			{
				if ((this._DateOfPassage != value))
				{
					this.OnDateOfPassageChanging(value);
					this.SendPropertyChanging();
					this._DateOfPassage = value;
					this.SendPropertyChanged("DateOfPassage");
					this.OnDateOfPassageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pay", DbType="Int NOT NULL")]
		public int Pay
		{
			get
			{
				return this._Pay;
			}
			set
			{
				if ((this._Pay != value))
				{
					this.OnPayChanging(value);
					this.SendPropertyChanging();
					this._Pay = value;
					this.SendPropertyChanged("Pay");
					this.OnPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LandfillUser_PassageLandfill", Storage="_LandfillUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public LandfillUser LandfillUser
		{
			get
			{
				return this._LandfillUser.Entity;
			}
			set
			{
				LandfillUser previousValue = this._LandfillUser.Entity;
				if (((previousValue != value) 
							|| (this._LandfillUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LandfillUser.Entity = null;
						previousValue.PassageLandfills.Remove(this);
					}
					this._LandfillUser.Entity = value;
					if ((value != null))
					{
						value.PassageLandfills.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("LandfillUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrokerAccounting")]
	public partial class BrokerAccounting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private int _BrokerID;
		
		private System.Nullable<System.DateTime> _TransferDate;
		
		private EntitySet<BrokerPaymentCommission> _BrokerPaymentCommissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnBrokerIDChanging(int value);
    partial void OnBrokerIDChanged();
    partial void OnTransferDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTransferDateChanged();
    #endregion
		
		public BrokerAccounting()
		{
			this._BrokerPaymentCommissions = new EntitySet<BrokerPaymentCommission>(new Action<BrokerPaymentCommission>(this.attach_BrokerPaymentCommissions), new Action<BrokerPaymentCommission>(this.detach_BrokerPaymentCommissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerID", DbType="Int NOT NULL")]
		public int BrokerID
		{
			get
			{
				return this._BrokerID;
			}
			set
			{
				if ((this._BrokerID != value))
				{
					this.OnBrokerIDChanging(value);
					this.SendPropertyChanging();
					this._BrokerID = value;
					this.SendPropertyChanged("BrokerID");
					this.OnBrokerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TransferDate
		{
			get
			{
				return this._TransferDate;
			}
			set
			{
				if ((this._TransferDate != value))
				{
					this.OnTransferDateChanging(value);
					this.SendPropertyChanging();
					this._TransferDate = value;
					this.SendPropertyChanged("TransferDate");
					this.OnTransferDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrokerAccounting_BrokerPaymentCommission", Storage="_BrokerPaymentCommissions", ThisKey="ID", OtherKey="BrokerAccountingID")]
		public EntitySet<BrokerPaymentCommission> BrokerPaymentCommissions
		{
			get
			{
				return this._BrokerPaymentCommissions;
			}
			set
			{
				this._BrokerPaymentCommissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrokerPaymentCommissions(BrokerPaymentCommission entity)
		{
			this.SendPropertyChanging();
			entity.BrokerAccounting = this;
		}
		
		private void detach_BrokerPaymentCommissions(BrokerPaymentCommission entity)
		{
			this.SendPropertyChanging();
			entity.BrokerAccounting = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrokerPassageProduct")]
	public partial class BrokerPassageProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private int _ContractsBrokerID;
		
		private int _ProductName;
		
		private decimal _Weight;
		
		private System.DateTime _Date;
		
		private EntitySet<BrokerPaymentCommission> _BrokerPaymentCommissions;
		
		private EntityRef<ContractsBroker> _ContractsBroker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnContractsBrokerIDChanging(int value);
    partial void OnContractsBrokerIDChanged();
    partial void OnProductNameChanging(int value);
    partial void OnProductNameChanged();
    partial void OnWeightChanging(decimal value);
    partial void OnWeightChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public BrokerPassageProduct()
		{
			this._BrokerPaymentCommissions = new EntitySet<BrokerPaymentCommission>(new Action<BrokerPaymentCommission>(this.attach_BrokerPaymentCommissions), new Action<BrokerPaymentCommission>(this.detach_BrokerPaymentCommissions));
			this._ContractsBroker = default(EntityRef<ContractsBroker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractsBrokerID", DbType="Int NOT NULL")]
		public int ContractsBrokerID
		{
			get
			{
				return this._ContractsBrokerID;
			}
			set
			{
				if ((this._ContractsBrokerID != value))
				{
					if (this._ContractsBroker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractsBrokerIDChanging(value);
					this.SendPropertyChanging();
					this._ContractsBrokerID = value;
					this.SendPropertyChanged("ContractsBrokerID");
					this.OnContractsBrokerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="Int NOT NULL")]
		public int ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Decimal(18,2) NOT NULL")]
		public decimal Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrokerPassageProduct_BrokerPaymentCommission", Storage="_BrokerPaymentCommissions", ThisKey="ID", OtherKey="BrokerPassageProductID")]
		public EntitySet<BrokerPaymentCommission> BrokerPaymentCommissions
		{
			get
			{
				return this._BrokerPaymentCommissions;
			}
			set
			{
				this._BrokerPaymentCommissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractsBroker_BrokerPassageProduct", Storage="_ContractsBroker", ThisKey="ContractsBrokerID", OtherKey="ID", IsForeignKey=true)]
		public ContractsBroker ContractsBroker
		{
			get
			{
				return this._ContractsBroker.Entity;
			}
			set
			{
				ContractsBroker previousValue = this._ContractsBroker.Entity;
				if (((previousValue != value) 
							|| (this._ContractsBroker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractsBroker.Entity = null;
						previousValue.BrokerPassageProducts.Remove(this);
					}
					this._ContractsBroker.Entity = value;
					if ((value != null))
					{
						value.BrokerPassageProducts.Add(this);
						this._ContractsBrokerID = value.ID;
					}
					else
					{
						this._ContractsBrokerID = default(int);
					}
					this.SendPropertyChanged("ContractsBroker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrokerPaymentCommissions(BrokerPaymentCommission entity)
		{
			this.SendPropertyChanging();
			entity.BrokerPassageProduct = this;
		}
		
		private void detach_BrokerPaymentCommissions(BrokerPaymentCommission entity)
		{
			this.SendPropertyChanging();
			entity.BrokerPassageProduct = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BrokerPaymentCommissions")]
	public partial class BrokerPaymentCommission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private int _BrokerPassageProductID;
		
		private decimal _Amount;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private System.Nullable<int> _BrokerAccountingID;
		
		private EntityRef<BrokerAccounting> _BrokerAccounting;
		
		private EntityRef<BrokerPassageProduct> _BrokerPassageProduct;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnBrokerPassageProductIDChanging(int value);
    partial void OnBrokerPassageProductIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentDateChanged();
    partial void OnBrokerAccountingIDChanging(System.Nullable<int> value);
    partial void OnBrokerAccountingIDChanged();
    #endregion
		
		public BrokerPaymentCommission()
		{
			this._BrokerAccounting = default(EntityRef<BrokerAccounting>);
			this._BrokerPassageProduct = default(EntityRef<BrokerPassageProduct>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerPassageProductID", DbType="Int NOT NULL")]
		public int BrokerPassageProductID
		{
			get
			{
				return this._BrokerPassageProductID;
			}
			set
			{
				if ((this._BrokerPassageProductID != value))
				{
					if (this._BrokerPassageProduct.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrokerPassageProductIDChanging(value);
					this.SendPropertyChanging();
					this._BrokerPassageProductID = value;
					this.SendPropertyChanged("BrokerPassageProductID");
					this.OnBrokerPassageProductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerAccountingID", DbType="Int")]
		public System.Nullable<int> BrokerAccountingID
		{
			get
			{
				return this._BrokerAccountingID;
			}
			set
			{
				if ((this._BrokerAccountingID != value))
				{
					if (this._BrokerAccounting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrokerAccountingIDChanging(value);
					this.SendPropertyChanging();
					this._BrokerAccountingID = value;
					this.SendPropertyChanged("BrokerAccountingID");
					this.OnBrokerAccountingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrokerAccounting_BrokerPaymentCommission", Storage="_BrokerAccounting", ThisKey="BrokerAccountingID", OtherKey="ID", IsForeignKey=true)]
		public BrokerAccounting BrokerAccounting
		{
			get
			{
				return this._BrokerAccounting.Entity;
			}
			set
			{
				BrokerAccounting previousValue = this._BrokerAccounting.Entity;
				if (((previousValue != value) 
							|| (this._BrokerAccounting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrokerAccounting.Entity = null;
						previousValue.BrokerPaymentCommissions.Remove(this);
					}
					this._BrokerAccounting.Entity = value;
					if ((value != null))
					{
						value.BrokerPaymentCommissions.Add(this);
						this._BrokerAccountingID = value.ID;
					}
					else
					{
						this._BrokerAccountingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BrokerAccounting");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BrokerPassageProduct_BrokerPaymentCommission", Storage="_BrokerPassageProduct", ThisKey="BrokerPassageProductID", OtherKey="ID", IsForeignKey=true)]
		public BrokerPassageProduct BrokerPassageProduct
		{
			get
			{
				return this._BrokerPassageProduct.Entity;
			}
			set
			{
				BrokerPassageProduct previousValue = this._BrokerPassageProduct.Entity;
				if (((previousValue != value) 
							|| (this._BrokerPassageProduct.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrokerPassageProduct.Entity = null;
						previousValue.BrokerPaymentCommissions.Remove(this);
					}
					this._BrokerPassageProduct.Entity = value;
					if ((value != null))
					{
						value.BrokerPaymentCommissions.Add(this);
						this._BrokerPassageProductID = value.ID;
					}
					else
					{
						this._BrokerPassageProductID = default(int);
					}
					this.SendPropertyChanged("BrokerPassageProduct");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractsBroker")]
	public partial class ContractsBroker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private string _Number;
		
		private System.DateTime _SubscriptionDate;
		
		private int _Status;
		
		private System.Nullable<System.DateTime> _TerminationDate;
		
		private int _BrokerID;
		
		private EntitySet<BrokerPassageProduct> _BrokerPassageProducts;
		
		private EntitySet<ContratsBrokerRemuneratedSetting> _ContratsBrokerRemuneratedSettings;
		
		private EntityRef<Broker> _Broker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnSubscriptionDateChanging(System.DateTime value);
    partial void OnSubscriptionDateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnTerminationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTerminationDateChanged();
    partial void OnBrokerIDChanging(int value);
    partial void OnBrokerIDChanged();
    #endregion
		
		public ContractsBroker()
		{
			this._BrokerPassageProducts = new EntitySet<BrokerPassageProduct>(new Action<BrokerPassageProduct>(this.attach_BrokerPassageProducts), new Action<BrokerPassageProduct>(this.detach_BrokerPassageProducts));
			this._ContratsBrokerRemuneratedSettings = new EntitySet<ContratsBrokerRemuneratedSetting>(new Action<ContratsBrokerRemuneratedSetting>(this.attach_ContratsBrokerRemuneratedSettings), new Action<ContratsBrokerRemuneratedSetting>(this.detach_ContratsBrokerRemuneratedSettings));
			this._Broker = default(EntityRef<Broker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionDate", DbType="DateTime NOT NULL")]
		public System.DateTime SubscriptionDate
		{
			get
			{
				return this._SubscriptionDate;
			}
			set
			{
				if ((this._SubscriptionDate != value))
				{
					this.OnSubscriptionDateChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionDate = value;
					this.SendPropertyChanged("SubscriptionDate");
					this.OnSubscriptionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TerminationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TerminationDate
		{
			get
			{
				return this._TerminationDate;
			}
			set
			{
				if ((this._TerminationDate != value))
				{
					this.OnTerminationDateChanging(value);
					this.SendPropertyChanging();
					this._TerminationDate = value;
					this.SendPropertyChanged("TerminationDate");
					this.OnTerminationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerID", DbType="Int NOT NULL")]
		public int BrokerID
		{
			get
			{
				return this._BrokerID;
			}
			set
			{
				if ((this._BrokerID != value))
				{
					if (this._Broker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrokerIDChanging(value);
					this.SendPropertyChanging();
					this._BrokerID = value;
					this.SendPropertyChanged("BrokerID");
					this.OnBrokerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractsBroker_BrokerPassageProduct", Storage="_BrokerPassageProducts", ThisKey="ID", OtherKey="ContractsBrokerID")]
		public EntitySet<BrokerPassageProduct> BrokerPassageProducts
		{
			get
			{
				return this._BrokerPassageProducts;
			}
			set
			{
				this._BrokerPassageProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractsBroker_ContratsBrokerRemuneratedSetting", Storage="_ContratsBrokerRemuneratedSettings", ThisKey="ID", OtherKey="ContratsBrokerID")]
		public EntitySet<ContratsBrokerRemuneratedSetting> ContratsBrokerRemuneratedSettings
		{
			get
			{
				return this._ContratsBrokerRemuneratedSettings;
			}
			set
			{
				this._ContratsBrokerRemuneratedSettings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Broker_ContractsBroker", Storage="_Broker", ThisKey="BrokerID", OtherKey="ID", IsForeignKey=true)]
		public Broker Broker
		{
			get
			{
				return this._Broker.Entity;
			}
			set
			{
				Broker previousValue = this._Broker.Entity;
				if (((previousValue != value) 
							|| (this._Broker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Broker.Entity = null;
						previousValue.ContractsBrokers.Remove(this);
					}
					this._Broker.Entity = value;
					if ((value != null))
					{
						value.ContractsBrokers.Add(this);
						this._BrokerID = value.ID;
					}
					else
					{
						this._BrokerID = default(int);
					}
					this.SendPropertyChanged("Broker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BrokerPassageProducts(BrokerPassageProduct entity)
		{
			this.SendPropertyChanging();
			entity.ContractsBroker = this;
		}
		
		private void detach_BrokerPassageProducts(BrokerPassageProduct entity)
		{
			this.SendPropertyChanging();
			entity.ContractsBroker = null;
		}
		
		private void attach_ContratsBrokerRemuneratedSettings(ContratsBrokerRemuneratedSetting entity)
		{
			this.SendPropertyChanging();
			entity.ContractsBroker = this;
		}
		
		private void detach_ContratsBrokerRemuneratedSettings(ContratsBrokerRemuneratedSetting entity)
		{
			this.SendPropertyChanging();
			entity.ContractsBroker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractsLogistics")]
	public partial class ContractsLogistic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private string _Number;
		
		private System.DateTime _SubscriptionDate;
		
		private int _Status;
		
		private System.Nullable<System.DateTime> _TerminationDate;
		
		private int _LogisticsID;
		
		private EntitySet<ContratsLogisticsRemuneratedSetting> _ContratsLogisticsRemuneratedSettings;
		
		private EntitySet<LogisticTurnCollect> _LogisticTurnCollects;
		
		private EntityRef<Logistic> _Logistic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnSubscriptionDateChanging(System.DateTime value);
    partial void OnSubscriptionDateChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnTerminationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTerminationDateChanged();
    partial void OnLogisticsIDChanging(int value);
    partial void OnLogisticsIDChanged();
    #endregion
		
		public ContractsLogistic()
		{
			this._ContratsLogisticsRemuneratedSettings = new EntitySet<ContratsLogisticsRemuneratedSetting>(new Action<ContratsLogisticsRemuneratedSetting>(this.attach_ContratsLogisticsRemuneratedSettings), new Action<ContratsLogisticsRemuneratedSetting>(this.detach_ContratsLogisticsRemuneratedSettings));
			this._LogisticTurnCollects = new EntitySet<LogisticTurnCollect>(new Action<LogisticTurnCollect>(this.attach_LogisticTurnCollects), new Action<LogisticTurnCollect>(this.detach_LogisticTurnCollects));
			this._Logistic = default(EntityRef<Logistic>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscriptionDate", DbType="DateTime NOT NULL")]
		public System.DateTime SubscriptionDate
		{
			get
			{
				return this._SubscriptionDate;
			}
			set
			{
				if ((this._SubscriptionDate != value))
				{
					this.OnSubscriptionDateChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionDate = value;
					this.SendPropertyChanged("SubscriptionDate");
					this.OnSubscriptionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TerminationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TerminationDate
		{
			get
			{
				return this._TerminationDate;
			}
			set
			{
				if ((this._TerminationDate != value))
				{
					this.OnTerminationDateChanging(value);
					this.SendPropertyChanging();
					this._TerminationDate = value;
					this.SendPropertyChanged("TerminationDate");
					this.OnTerminationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogisticsID", DbType="Int NOT NULL")]
		public int LogisticsID
		{
			get
			{
				return this._LogisticsID;
			}
			set
			{
				if ((this._LogisticsID != value))
				{
					if (this._Logistic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogisticsIDChanging(value);
					this.SendPropertyChanging();
					this._LogisticsID = value;
					this.SendPropertyChanged("LogisticsID");
					this.OnLogisticsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractsLogistic_ContratsLogisticsRemuneratedSetting", Storage="_ContratsLogisticsRemuneratedSettings", ThisKey="ID", OtherKey="ContratsLogisticsID")]
		public EntitySet<ContratsLogisticsRemuneratedSetting> ContratsLogisticsRemuneratedSettings
		{
			get
			{
				return this._ContratsLogisticsRemuneratedSettings;
			}
			set
			{
				this._ContratsLogisticsRemuneratedSettings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractsLogistic_LogisticTurnCollect", Storage="_LogisticTurnCollects", ThisKey="ID", OtherKey="ContractsLogisticsID")]
		public EntitySet<LogisticTurnCollect> LogisticTurnCollects
		{
			get
			{
				return this._LogisticTurnCollects;
			}
			set
			{
				this._LogisticTurnCollects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Logistic_ContractsLogistic", Storage="_Logistic", ThisKey="LogisticsID", OtherKey="ID", IsForeignKey=true)]
		public Logistic Logistic
		{
			get
			{
				return this._Logistic.Entity;
			}
			set
			{
				Logistic previousValue = this._Logistic.Entity;
				if (((previousValue != value) 
							|| (this._Logistic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Logistic.Entity = null;
						previousValue.ContractsLogistics.Remove(this);
					}
					this._Logistic.Entity = value;
					if ((value != null))
					{
						value.ContractsLogistics.Add(this);
						this._LogisticsID = value.ID;
					}
					else
					{
						this._LogisticsID = default(int);
					}
					this.SendPropertyChanged("Logistic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContratsLogisticsRemuneratedSettings(ContratsLogisticsRemuneratedSetting entity)
		{
			this.SendPropertyChanging();
			entity.ContractsLogistic = this;
		}
		
		private void detach_ContratsLogisticsRemuneratedSettings(ContratsLogisticsRemuneratedSetting entity)
		{
			this.SendPropertyChanging();
			entity.ContractsLogistic = null;
		}
		
		private void attach_LogisticTurnCollects(LogisticTurnCollect entity)
		{
			this.SendPropertyChanging();
			entity.ContractsLogistic = this;
		}
		
		private void detach_LogisticTurnCollects(LogisticTurnCollect entity)
		{
			this.SendPropertyChanging();
			entity.ContractsLogistic = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContratsBrokerRemuneratedSettings")]
	public partial class ContratsBrokerRemuneratedSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private int _ContratsBrokerID;
		
		private int _ProductName;
		
		private decimal _Value;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntityRef<ContractsBroker> _ContractsBroker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnContratsBrokerIDChanging(int value);
    partial void OnContratsBrokerIDChanged();
    partial void OnProductNameChanging(int value);
    partial void OnProductNameChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public ContratsBrokerRemuneratedSetting()
		{
			this._ContractsBroker = default(EntityRef<ContractsBroker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContratsBrokerID", DbType="Int NOT NULL")]
		public int ContratsBrokerID
		{
			get
			{
				return this._ContratsBrokerID;
			}
			set
			{
				if ((this._ContratsBrokerID != value))
				{
					if (this._ContractsBroker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContratsBrokerIDChanging(value);
					this.SendPropertyChanging();
					this._ContratsBrokerID = value;
					this.SendPropertyChanged("ContratsBrokerID");
					this.OnContratsBrokerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="Int NOT NULL")]
		public int ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractsBroker_ContratsBrokerRemuneratedSetting", Storage="_ContractsBroker", ThisKey="ContratsBrokerID", OtherKey="ID", IsForeignKey=true)]
		public ContractsBroker ContractsBroker
		{
			get
			{
				return this._ContractsBroker.Entity;
			}
			set
			{
				ContractsBroker previousValue = this._ContractsBroker.Entity;
				if (((previousValue != value) 
							|| (this._ContractsBroker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractsBroker.Entity = null;
						previousValue.ContratsBrokerRemuneratedSettings.Remove(this);
					}
					this._ContractsBroker.Entity = value;
					if ((value != null))
					{
						value.ContratsBrokerRemuneratedSettings.Add(this);
						this._ContratsBrokerID = value.ID;
					}
					else
					{
						this._ContratsBrokerID = default(int);
					}
					this.SendPropertyChanged("ContractsBroker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContratsLogisticsRemuneratedSettings")]
	public partial class ContratsLogisticsRemuneratedSetting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private int _ContratsLogisticsID;
		
		private int _KmInterval;
		
		private decimal _Value;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntityRef<ContractsLogistic> _ContractsLogistic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnContratsLogisticsIDChanging(int value);
    partial void OnContratsLogisticsIDChanged();
    partial void OnKmIntervalChanging(int value);
    partial void OnKmIntervalChanged();
    partial void OnValueChanging(decimal value);
    partial void OnValueChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public ContratsLogisticsRemuneratedSetting()
		{
			this._ContractsLogistic = default(EntityRef<ContractsLogistic>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContratsLogisticsID", DbType="Int NOT NULL")]
		public int ContratsLogisticsID
		{
			get
			{
				return this._ContratsLogisticsID;
			}
			set
			{
				if ((this._ContratsLogisticsID != value))
				{
					if (this._ContractsLogistic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContratsLogisticsIDChanging(value);
					this.SendPropertyChanging();
					this._ContratsLogisticsID = value;
					this.SendPropertyChanged("ContratsLogisticsID");
					this.OnContratsLogisticsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KmInterval", DbType="Int NOT NULL")]
		public int KmInterval
		{
			get
			{
				return this._KmInterval;
			}
			set
			{
				if ((this._KmInterval != value))
				{
					this.OnKmIntervalChanging(value);
					this.SendPropertyChanging();
					this._KmInterval = value;
					this.SendPropertyChanged("KmInterval");
					this.OnKmIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Decimal(18,2) NOT NULL")]
		public decimal Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractsLogistic_ContratsLogisticsRemuneratedSetting", Storage="_ContractsLogistic", ThisKey="ContratsLogisticsID", OtherKey="ID", IsForeignKey=true)]
		public ContractsLogistic ContractsLogistic
		{
			get
			{
				return this._ContractsLogistic.Entity;
			}
			set
			{
				ContractsLogistic previousValue = this._ContractsLogistic.Entity;
				if (((previousValue != value) 
							|| (this._ContractsLogistic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractsLogistic.Entity = null;
						previousValue.ContratsLogisticsRemuneratedSettings.Remove(this);
					}
					this._ContractsLogistic.Entity = value;
					if ((value != null))
					{
						value.ContratsLogisticsRemuneratedSettings.Add(this);
						this._ContratsLogisticsID = value.ID;
					}
					else
					{
						this._ContratsLogisticsID = default(int);
					}
					this.SendPropertyChanged("ContractsLogistic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnumDisplay")]
	public partial class EnumDisplay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Type;
		
		private int _Key;
		
		private string _Display;
		
		private System.DateTime _Updated;
		
		private System.DateTime _Created;
		
		private int _Enable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnKeyChanging(int value);
    partial void OnKeyChanged();
    partial void OnDisplayChanging(string value);
    partial void OnDisplayChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnEnableChanging(int value);
    partial void OnEnableChanged();
    #endregion
		
		public EnumDisplay()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="Int NOT NULL")]
		public int Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Display", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string Display
		{
			get
			{
				return this._Display;
			}
			set
			{
				if ((this._Display != value))
				{
					this.OnDisplayChanging(value);
					this.SendPropertyChanging();
					this._Display = value;
					this.SendPropertyChanged("Display");
					this.OnDisplayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enable", DbType="Int NOT NULL")]
		public int Enable
		{
			get
			{
				return this._Enable;
			}
			set
			{
				if ((this._Enable != value))
				{
					this.OnEnableChanging(value);
					this.SendPropertyChanging();
					this._Enable = value;
					this.SendPropertyChanged("Enable");
					this.OnEnableChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LandfillUser")]
	public partial class LandfillUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private string _CompanyCoperateName;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Address;
		
		private string _City;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private System.Nullable<int> _Type;
		
		private string _Password;
		
		private EntityRef<Broker> _Broker;
		
		private EntitySet<PassageLandfill> _PassageLandfills;
		
		private EntityRef<Logistic> _Logistic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnCompanyCoperateNameChanging(string value);
    partial void OnCompanyCoperateNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public LandfillUser()
		{
			this._Broker = default(EntityRef<Broker>);
			this._PassageLandfills = new EntitySet<PassageLandfill>(new Action<PassageLandfill>(this.attach_PassageLandfills), new Action<PassageLandfill>(this.detach_PassageLandfills));
			this._Logistic = default(EntityRef<Logistic>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyCoperateName", DbType="NVarChar(200)")]
		public string CompanyCoperateName
		{
			get
			{
				return this._CompanyCoperateName;
			}
			set
			{
				if ((this._CompanyCoperateName != value))
				{
					this.OnCompanyCoperateNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyCoperateName = value;
					this.SendPropertyChanged("CompanyCoperateName");
					this.OnCompanyCoperateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(200)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(200)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(200)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(200)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LandfillUser_Broker", Storage="_Broker", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public Broker Broker
		{
			get
			{
				return this._Broker.Entity;
			}
			set
			{
				Broker previousValue = this._Broker.Entity;
				if (((previousValue != value) 
							|| (this._Broker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Broker.Entity = null;
						previousValue.LandfillUser = null;
					}
					this._Broker.Entity = value;
					if ((value != null))
					{
						value.LandfillUser = this;
					}
					this.SendPropertyChanged("Broker");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LandfillUser_PassageLandfill", Storage="_PassageLandfills", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PassageLandfill> PassageLandfills
		{
			get
			{
				return this._PassageLandfills;
			}
			set
			{
				this._PassageLandfills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LandfillUser_Logistic", Storage="_Logistic", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public Logistic Logistic
		{
			get
			{
				return this._Logistic.Entity;
			}
			set
			{
				Logistic previousValue = this._Logistic.Entity;
				if (((previousValue != value) 
							|| (this._Logistic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Logistic.Entity = null;
						previousValue.LandfillUser = null;
					}
					this._Logistic.Entity = value;
					if ((value != null))
					{
						value.LandfillUser = this;
					}
					this.SendPropertyChanged("Logistic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PassageLandfills(PassageLandfill entity)
		{
			this.SendPropertyChanging();
			entity.LandfillUser = this;
		}
		
		private void detach_PassageLandfills(PassageLandfill entity)
		{
			this.SendPropertyChanging();
			entity.LandfillUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogisticAccounting")]
	public partial class LogisticAccounting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private int _LogisticID;
		
		private System.Nullable<System.DateTime> _TransferDate;
		
		private EntitySet<LogisticPaymentCommission> _LogisticPaymentCommissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnLogisticIDChanging(int value);
    partial void OnLogisticIDChanged();
    partial void OnTransferDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTransferDateChanged();
    #endregion
		
		public LogisticAccounting()
		{
			this._LogisticPaymentCommissions = new EntitySet<LogisticPaymentCommission>(new Action<LogisticPaymentCommission>(this.attach_LogisticPaymentCommissions), new Action<LogisticPaymentCommission>(this.detach_LogisticPaymentCommissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogisticID", DbType="Int NOT NULL")]
		public int LogisticID
		{
			get
			{
				return this._LogisticID;
			}
			set
			{
				if ((this._LogisticID != value))
				{
					this.OnLogisticIDChanging(value);
					this.SendPropertyChanging();
					this._LogisticID = value;
					this.SendPropertyChanged("LogisticID");
					this.OnLogisticIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TransferDate
		{
			get
			{
				return this._TransferDate;
			}
			set
			{
				if ((this._TransferDate != value))
				{
					this.OnTransferDateChanging(value);
					this.SendPropertyChanging();
					this._TransferDate = value;
					this.SendPropertyChanged("TransferDate");
					this.OnTransferDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogisticAccounting_LogisticPaymentCommission", Storage="_LogisticPaymentCommissions", ThisKey="ID", OtherKey="LogisticAccountingID")]
		public EntitySet<LogisticPaymentCommission> LogisticPaymentCommissions
		{
			get
			{
				return this._LogisticPaymentCommissions;
			}
			set
			{
				this._LogisticPaymentCommissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogisticPaymentCommissions(LogisticPaymentCommission entity)
		{
			this.SendPropertyChanging();
			entity.LogisticAccounting = this;
		}
		
		private void detach_LogisticPaymentCommissions(LogisticPaymentCommission entity)
		{
			this.SendPropertyChanging();
			entity.LogisticAccounting = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogisticPaymentCommissions")]
	public partial class LogisticPaymentCommission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private int _LogisticTurnCollectID;
		
		private decimal _Amount;
		
		private System.Nullable<System.DateTime> _PaymentDate;
		
		private System.Nullable<int> _LogisticAccountingID;
		
		private EntityRef<LogisticAccounting> _LogisticAccounting;
		
		private EntityRef<LogisticTurnCollect> _LogisticTurnCollect;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnLogisticTurnCollectIDChanging(int value);
    partial void OnLogisticTurnCollectIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPaymentDateChanged();
    partial void OnLogisticAccountingIDChanging(System.Nullable<int> value);
    partial void OnLogisticAccountingIDChanged();
    #endregion
		
		public LogisticPaymentCommission()
		{
			this._LogisticAccounting = default(EntityRef<LogisticAccounting>);
			this._LogisticTurnCollect = default(EntityRef<LogisticTurnCollect>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogisticTurnCollectID", DbType="Int NOT NULL")]
		public int LogisticTurnCollectID
		{
			get
			{
				return this._LogisticTurnCollectID;
			}
			set
			{
				if ((this._LogisticTurnCollectID != value))
				{
					if (this._LogisticTurnCollect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogisticTurnCollectIDChanging(value);
					this.SendPropertyChanging();
					this._LogisticTurnCollectID = value;
					this.SendPropertyChanged("LogisticTurnCollectID");
					this.OnLogisticTurnCollectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PaymentDate
		{
			get
			{
				return this._PaymentDate;
			}
			set
			{
				if ((this._PaymentDate != value))
				{
					this.OnPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._PaymentDate = value;
					this.SendPropertyChanged("PaymentDate");
					this.OnPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogisticAccountingID", DbType="Int")]
		public System.Nullable<int> LogisticAccountingID
		{
			get
			{
				return this._LogisticAccountingID;
			}
			set
			{
				if ((this._LogisticAccountingID != value))
				{
					if (this._LogisticAccounting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLogisticAccountingIDChanging(value);
					this.SendPropertyChanging();
					this._LogisticAccountingID = value;
					this.SendPropertyChanged("LogisticAccountingID");
					this.OnLogisticAccountingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogisticAccounting_LogisticPaymentCommission", Storage="_LogisticAccounting", ThisKey="LogisticAccountingID", OtherKey="ID", IsForeignKey=true)]
		public LogisticAccounting LogisticAccounting
		{
			get
			{
				return this._LogisticAccounting.Entity;
			}
			set
			{
				LogisticAccounting previousValue = this._LogisticAccounting.Entity;
				if (((previousValue != value) 
							|| (this._LogisticAccounting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogisticAccounting.Entity = null;
						previousValue.LogisticPaymentCommissions.Remove(this);
					}
					this._LogisticAccounting.Entity = value;
					if ((value != null))
					{
						value.LogisticPaymentCommissions.Add(this);
						this._LogisticAccountingID = value.ID;
					}
					else
					{
						this._LogisticAccountingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("LogisticAccounting");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogisticTurnCollect_LogisticPaymentCommission", Storage="_LogisticTurnCollect", ThisKey="LogisticTurnCollectID", OtherKey="ID", IsForeignKey=true)]
		public LogisticTurnCollect LogisticTurnCollect
		{
			get
			{
				return this._LogisticTurnCollect.Entity;
			}
			set
			{
				LogisticTurnCollect previousValue = this._LogisticTurnCollect.Entity;
				if (((previousValue != value) 
							|| (this._LogisticTurnCollect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LogisticTurnCollect.Entity = null;
						previousValue.LogisticPaymentCommissions.Remove(this);
					}
					this._LogisticTurnCollect.Entity = value;
					if ((value != null))
					{
						value.LogisticPaymentCommissions.Add(this);
						this._LogisticTurnCollectID = value.ID;
					}
					else
					{
						this._LogisticTurnCollectID = default(int);
					}
					this.SendPropertyChanged("LogisticTurnCollect");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Logistics")]
	public partial class Logistic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private string _CompanyName;
		
		private string _InternalCode;
		
		private string _CompanyRegistrationNumber;
		
		private EntitySet<ContractsLogistic> _ContractsLogistics;
		
		private EntityRef<LandfillUser> _LandfillUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnInternalCodeChanging(string value);
    partial void OnInternalCodeChanged();
    partial void OnCompanyRegistrationNumberChanging(string value);
    partial void OnCompanyRegistrationNumberChanged();
    #endregion
		
		public Logistic()
		{
			this._ContractsLogistics = new EntitySet<ContractsLogistic>(new Action<ContractsLogistic>(this.attach_ContractsLogistics), new Action<ContractsLogistic>(this.detach_ContractsLogistics));
			this._LandfillUser = default(EntityRef<LandfillUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._LandfillUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalCode", DbType="NVarChar(200)")]
		public string InternalCode
		{
			get
			{
				return this._InternalCode;
			}
			set
			{
				if ((this._InternalCode != value))
				{
					this.OnInternalCodeChanging(value);
					this.SendPropertyChanging();
					this._InternalCode = value;
					this.SendPropertyChanged("InternalCode");
					this.OnInternalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyRegistrationNumber", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string CompanyRegistrationNumber
		{
			get
			{
				return this._CompanyRegistrationNumber;
			}
			set
			{
				if ((this._CompanyRegistrationNumber != value))
				{
					this.OnCompanyRegistrationNumberChanging(value);
					this.SendPropertyChanging();
					this._CompanyRegistrationNumber = value;
					this.SendPropertyChanged("CompanyRegistrationNumber");
					this.OnCompanyRegistrationNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Logistic_ContractsLogistic", Storage="_ContractsLogistics", ThisKey="ID", OtherKey="LogisticsID")]
		public EntitySet<ContractsLogistic> ContractsLogistics
		{
			get
			{
				return this._ContractsLogistics;
			}
			set
			{
				this._ContractsLogistics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LandfillUser_Logistic", Storage="_LandfillUser", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public LandfillUser LandfillUser
		{
			get
			{
				return this._LandfillUser.Entity;
			}
			set
			{
				LandfillUser previousValue = this._LandfillUser.Entity;
				if (((previousValue != value) 
							|| (this._LandfillUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LandfillUser.Entity = null;
						previousValue.Logistic = null;
					}
					this._LandfillUser.Entity = value;
					if ((value != null))
					{
						value.Logistic = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("LandfillUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractsLogistics(ContractsLogistic entity)
		{
			this.SendPropertyChanging();
			entity.Logistic = this;
		}
		
		private void detach_ContractsLogistics(ContractsLogistic entity)
		{
			this.SendPropertyChanging();
			entity.Logistic = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogisticTurnCollect")]
	public partial class LogisticTurnCollect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private int _ContractsLogisticsID;
		
		private decimal _Distance;
		
		private System.DateTime _Date;
		
		private EntitySet<LogisticPaymentCommission> _LogisticPaymentCommissions;
		
		private EntityRef<ContractsLogistic> _ContractsLogistic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnContractsLogisticsIDChanging(int value);
    partial void OnContractsLogisticsIDChanged();
    partial void OnDistanceChanging(decimal value);
    partial void OnDistanceChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public LogisticTurnCollect()
		{
			this._LogisticPaymentCommissions = new EntitySet<LogisticPaymentCommission>(new Action<LogisticPaymentCommission>(this.attach_LogisticPaymentCommissions), new Action<LogisticPaymentCommission>(this.detach_LogisticPaymentCommissions));
			this._ContractsLogistic = default(EntityRef<ContractsLogistic>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractsLogisticsID", DbType="Int NOT NULL")]
		public int ContractsLogisticsID
		{
			get
			{
				return this._ContractsLogisticsID;
			}
			set
			{
				if ((this._ContractsLogisticsID != value))
				{
					if (this._ContractsLogistic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractsLogisticsIDChanging(value);
					this.SendPropertyChanging();
					this._ContractsLogisticsID = value;
					this.SendPropertyChanged("ContractsLogisticsID");
					this.OnContractsLogisticsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Distance", DbType="Decimal(18,2) NOT NULL")]
		public decimal Distance
		{
			get
			{
				return this._Distance;
			}
			set
			{
				if ((this._Distance != value))
				{
					this.OnDistanceChanging(value);
					this.SendPropertyChanging();
					this._Distance = value;
					this.SendPropertyChanged("Distance");
					this.OnDistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LogisticTurnCollect_LogisticPaymentCommission", Storage="_LogisticPaymentCommissions", ThisKey="ID", OtherKey="LogisticTurnCollectID")]
		public EntitySet<LogisticPaymentCommission> LogisticPaymentCommissions
		{
			get
			{
				return this._LogisticPaymentCommissions;
			}
			set
			{
				this._LogisticPaymentCommissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractsLogistic_LogisticTurnCollect", Storage="_ContractsLogistic", ThisKey="ContractsLogisticsID", OtherKey="ID", IsForeignKey=true)]
		public ContractsLogistic ContractsLogistic
		{
			get
			{
				return this._ContractsLogistic.Entity;
			}
			set
			{
				ContractsLogistic previousValue = this._ContractsLogistic.Entity;
				if (((previousValue != value) 
							|| (this._ContractsLogistic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractsLogistic.Entity = null;
						previousValue.LogisticTurnCollects.Remove(this);
					}
					this._ContractsLogistic.Entity = value;
					if ((value != null))
					{
						value.LogisticTurnCollects.Add(this);
						this._ContractsLogisticsID = value.ID;
					}
					else
					{
						this._ContractsLogisticsID = default(int);
					}
					this.SendPropertyChanged("ContractsLogistic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LogisticPaymentCommissions(LogisticPaymentCommission entity)
		{
			this.SendPropertyChanging();
			entity.LogisticTurnCollect = this;
		}
		
		private void detach_LogisticPaymentCommissions(LogisticPaymentCommission entity)
		{
			this.SendPropertyChanging();
			entity.LogisticTurnCollect = null;
		}
	}
}
#pragma warning restore 1591
